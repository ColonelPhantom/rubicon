// herman's self stabilising algorithm [Her90]
// gxn/dxp 13/07/02

// the procotol is synchronous with no nondeterminism (a DTMC)
dtmc

const double p1;
const double p2;
const double p3;
const double p4;
const double p5;
const double p6;
const double p7;
const double p8;
const double p9;
const double p10;
const double p11;
const double p12;
const double p13;

// module for process 1
module process1

	// Boolean variable for process 1
	x1 : [0..1] init 1;

	[step] (x1=x13) -> p1 : (x1'=0) + 1-p1 : (x1'=1);
	[step] !(x1=x13) -> (x1'=x13);

endmodule

// add further processes through renaming
module process2 = process1 [ x1=x2, x13=x1, p1=p2 ] endmodule
module process3 = process1 [ x1=x3, x13=x2, p1=p3 ] endmodule
module process4 = process1 [ x1=x4, x13=x3, p1=p4 ] endmodule
module process5 = process1 [ x1=x5, x13=x4, p1=p5 ] endmodule
module process6 = process1 [ x1=x6, x13=x5, p1=p6 ] endmodule
module process7 = process1 [ x1=x7, x13=x6, p1=p7 ] endmodule
module process8 = process1 [ x1=x8, x13=x7, p1=p8 ] endmodule
module process9 = process1 [ x1=x9, x13=x8, p1=p9 ] endmodule
module process10 = process1 [ x1=x10, x13=x9, p1=p10 ] endmodule
module process11 = process1 [ x1=x11, x13=x10, p1=p11 ] endmodule
module process12 = process1 [ x1=x12, x13=x11, p1=p12 ] endmodule
module process13 = process1 [ x1=x13, x13=x12, p1=p13 ] endmodule

// cost - 1 in each state (expected number of steps)
rewards "steps"
	true : 1;
endrewards

// set of initial states: all (i.e. any possible initial configuration of tokens)
//init
//	true
//endinit

// formula, for use in properties: number of tokens
// (i.e. number of processes that have the same value as the process to their left)
formula num_tokens = (x1=x2?1:0)+(x2=x3?1:0)+(x3=x4?1:0)+(x4=x5?1:0)+(x5=x6?1:0)+(x6=x7?1:0)+(x7=x8?1:0)+(x8=x9?1:0)+(x9=x10?1:0)+(x10=x11?1:0)+(x11=x12?1:0)+(x12=x13?1:0)+(x13=x1?1:0);

// label - stable configurations (1 token)
label "stable" = num_tokens = 1;//exactlyOneOf(x1=x2,x2=x3,x3=x4,x4=x5,x5=x6,x6=x7,x7=x8,x8=x9,x9=x10,x10=x11,x11=x12,x12=x13,x13=x1); //num_tokens = 1;
//exactlyOneOf(x1=x2,x2=x3,x3=x4,x4=x5,x5=x6,x6=x7,x7=x8,x8=x9,x9=x10,x10=x11,x11=x12,x12=x13,x13=x1);
