
// the procotol is synchronous with no nondeterminism (a DTMC)
dtmc

const double p1 = 0.5;
const double p2 = 0.51;
const double p3 = 0.52;
const double p4 = 0.48;
const double p5 = 0.49;
const double p6 = 0.515;
const double p7 = 0.475;
const double p8 = 0.512;
const double p9 = 0.496;
const double p10 = 0.516;
const double p11 = 0.486;
const double p12 = 0.493;
const double p13 = 0.523;
const double p14 = 0.445;
const double p15 = 0.334;
const double p16 = 0.555;
const double p17 = 0.454;
const double p18 = 0.345;
const double p19 = 0.565;

// module for process 1
module process1

	// Boolean variable for process 1
	x1 : [0..1] init 1;

	[step]  (x1=x19) -> p1 : (x1'=0) + 1-p1 : (x1'=1);
	[step] !(x1=x19) -> (x1'=x19);

endmodule

// add further processes through renaming
module process2 = process1 [ x1=x2, x19=x1, p1=p2 ] endmodule
module process3 = process1 [ x1=x3, x19=x2, p1=p3 ] endmodule
module process4 = process1 [ x1=x4, x19=x3, p1=p4 ] endmodule
module process5 = process1 [ x1=x5, x19=x4, p1=p5 ] endmodule
module process6 = process1 [ x1=x6, x19=x5, p1=p6 ] endmodule
module process7 = process1 [ x1=x7, x19=x6, p1=p7 ] endmodule
module process8 = process1 [ x1=x8, x19=x7, p1=p8 ] endmodule
module process9 = process1 [ x1=x9, x19=x8, p1=p9 ] endmodule
module process10 = process1 [ x1=x10, x19=x9, p1=p10 ] endmodule
module process11 = process1 [ x1=x11, x19=x10, p1=p11 ] endmodule
module process12 = process1 [ x1=x12, x19=x11, p1=p12 ] endmodule
module process13 = process1 [ x1=x13, x19=x12, p1=p13 ] endmodule
module process14 = process1 [ x1=x14, x19=x13, p1=p14 ] endmodule
module process15 = process1 [ x1=x15, x19=x14, p1=p15 ] endmodule
module process16 = process1 [ x1=x16, x19=x15, p1=p16 ] endmodule
module process17 = process1 [ x1=x17, x19=x16, p1=p17 ] endmodule
module process18 = process1 [ x1=x18, x19=x17, p1=p18 ] endmodule
module process19 = process1 [ x1=x19, x19=x18, p1=p19 ] endmodule

// cost - 1 in each state (expected number of steps)
rewards "steps"
	true : 1;
endrewards

// set of initial states: all (i.e. any possible initial configuration of tokens)
//init
//	true
//endinit

// formula, for use in properties: number of tokens
// (i.e. number of processes that have the same value as the process to their left)
//formula num_tokens = (x1=x2?1:0)+(x2=x3?1:0)+(x3=x4?1:0)+(x4=x5?1:0)+(x5=x6?1:0)+(x6=x7?1:0)+(x7=x8?1:0)+(x8=x9?1:0)+(x9=x10?1:0)+(x10=x11?1:0)+(x11=x12?1:0)+(x12=x13?1:0)+(x13=x14?1:0)+(x14=x15?1:0)+(x15=x16?1:0)+(x16=x17?1:0)+(x17=x18?1:0)+(x18=x19?1:0)+(x19=x1?1:0);

// label - stable configurations (1 token)
label "stable" = exactlyOneOf(x1=x2,x2=x3,x3=x4,x4=x5,x5=x6,x6=x7,x7=x8,x8=x9,x9=x10,x10=x11,x11=x12,x12=x13,x13=x14,x14=x15,x15=x16,x16=x17,x17=x18,x18=x19,x19=x1);
